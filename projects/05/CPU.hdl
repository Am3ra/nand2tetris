// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    ALU(x=Dout, y=inx, 
        zx=instruction[11], 
        nx=instruction[10], 
        zy=instruction[9], 
        ny=instruction[8], 
        f=instruction[7], 
        no=instruction[6], 
        out=outALU, 
        zr=zero, 
        ng=neg);//ALU

    //a bit


    //take care of dest bits
    ARegister(in=inA, load=loadA, out=Aout);//Aregister
    DRegister(in=outALU, load=writeD, out=Dout);//Dregister

    And16(a=outALU, b=true, out=outM);
    And(a=instruction[3], b=instruction[15], out=writeM);
    And(a=instruction[4], b=instruction[15], out=writeD);
    And16(a=Aout, b=true, out[0..14]=addressM);



    //Decide what to store in A
    //~i OR (i AND instruction[5])
    Not(in=instruction[15], out=notI);
    And(a=instruction[15], b=instruction[5], out=Iand5);
    Or(a=notI, b=Iand5, out=loadA);


    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inA);//choose instruction or ALU



    

    //PC JUMP LOGIC
    //A>=B  
    //~b u (a n b)
    //(~b u a) n (~b u b)
    //(~b u a)
    
    //Case 1
    Not(in=neg, out=notNeg);
    Or(a=instruction[2], b=notNeg, out=and2);
    //Case 2
    Not(in=zero, out=notZero);
    Or(a=instruction[1], b=notZero, out=and1);
    //Case 3
    Or(a=neg, b=zero, out=notPos);
    Or(a=instruction[0], b=notPos, out=and0);

    And(a=and2, b=and1, out=and3);
    And(a=and3, b=and0, out=and4);
    And(a=and4, b=instruction[15], out=PCin);

    PC(in=Aout, load=PCin, inc=true, reset=reset, out[0..14]=pc);//PC

    //load A or M
    Mux16(a=Aout, b=inM, sel=instruction[12], out=inx); // choose A or M

    
}